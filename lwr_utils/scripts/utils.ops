
require("print")
require("os")
import("rtt_ros")
import("rtt_rospack")
import("rtt_roscomm")
import("lwr_utils")
import("rtt_geometry_msgs")
// to prevent https://github.com/orocos-toolchain/rtt/issues/150
this.setPeriod(0.001)
this.start
// "this" argument hasn't reach debians yet
this.loadService("Deployer","ros_helper")

global string getRobotName()
{
    return this.ros_helper.getRobotName();
}

global string getRobotNs()
{
    return this.ros_helper.getRobotNs();
}

global string getTfPrefix()
{
    return this.ros_helper.getTfPrefix();
}

global bool isSim()
{
    return this.ros_helper.isSim();
}

if(!isSim()) then
    import("rtt_rosnode")


global bool setRobotInitialJointConfiguration(double q0,double q1,double q2,double q3,double q4,double q5,double q6)
{
    if(!isSim()) then
    {
        // Super hack/fix because if q = 0. , then double(q0) sees an int
        // and can't build the array(int,int)...

        if(q0 == 0) then
            q0 = 0.00000001
        if(q1 == 0) then
            q1 = 0.00000001        
        if(q2 == 0) then
            q2 = 0.00000001
        if(q3 == 0) then
            q3 = 0.00000001
        if(q4 == 0) then
            q4 = 0.00000001
        if(q5 == 0) then
            q5 = 0.00000001
        if(q6 == 0) then
            q6 = 0.00000001

        scripting.eval(getRobotName()+"_krl_tool.PTP.moveJoint(array("+double(q0)+","+double(q1)+","+double(q2)+","+double(q3)+","+double(q4)+","+double(q5)+","+double(q6)+"),array(1.,1.,1.,1.,1.,1.,1.),false,30.0)")
        return true
    }
    // Example : setRobotInitialJointConfiguration(1.0,0.,0.0,-1.57,0.0,1.57,0.)
    this.ros_helper.rosServiceCall("/gazebo/set_model_configuration '{ model_name: "+getRobotName()+",joint_names: [ joint_0, joint_1, joint_2,joint_3, joint_4, joint_5, joint_6 ],joint_positions: ["+q0+", "+q1+", "+q2+", "+q3+", "+q4+", "+q5+", "+q6+"]}' --wait -v");
    return true;
}

global string getAtiFTSensorDataPort()
{
    return "ft_sensor.WrenchStamped"
}

global bool connectToAtiFTSensorPort(string comp_name,string port_name,ConnPolicy cp)
{
    connectPeers("ft_sensor",comp_name)
    if(isSim()) then
    {
        import("rtt_geometry_msgs")
        stream(comp_name+"."+port_name,ros.comm.topic("ft_sensor/wrench"))
    }else{
        connect(getAtiFTSensorDataPort(),comp_name+"."+port_name,cp)
    }
    return true
}
global string loadAtiFTSensor(bool start_component)
{
    if(isSim()) then
    {
        print.ln("\033[34;1mLoading ATI F/T Sensor (Simulated)\033[0m\n")
        print.ln("\033[34;1m=> Please use connectToAtiFTSensorPort(\"my_component\",\"my_geometry_msgs_port\",ConnPolicy())\033[0m\n")
    }else
    {
        ros.import("rtt_ati_sensor")
        loadComponent("ft_sensor","rtt_ati::FTSensor")
        print.ln("\033[34;1mLoading ATI F/T Sensor \033[0m\n")
    }

    setActivity("ft_sensor",0.001,10,ORO_SCHED_RT)
    // uncomment for event based update with netft box set at component periodicity
    //ft_sensor.read_mode = 2
    //ft_sensor.sample_count = 0

    configureComponent("ft_sensor")
    if(start_component) then
        startComponent("ft_sensor")
    return "ft_sensor"
}

global string loadKRLTool(bool start_component)
{
    var string robot_name = getRobotName()
    var string component_name = robot_name+"_krl_tool"
    print.ln("\033[34;1mLoading KRL Tool for "+robot_name+"\033[0m\n")
    ros.import("rtt_lwr_krl_tool")
    import("rtt_std_srvs")
    loadComponent(component_name,"lwr::KRLTool")
    setActivity(component_name,0,10,ORO_SCHED_OTHER)

    var ConnPolicy cp
    cp.lock_policy = 1

    connectPeers(component_name,robot_name)
    connect(component_name+".toKRL"  ,robot_name+".toKRL"    ,cp)
    connect(component_name+".fromKRL",robot_name+".fromKRL"  ,cp)
    connect(component_name+".JointImpedanceCommand",robot_name+".JointImpedanceCommand",cp)
    configureComponent(component_name)

    loadService(component_name,"rosservice")

    scripting.eval(component_name+".rosservice.connect(\"setJointImpedanceControlModeROSService\",\""+component_name+"/set_joint_impedance_control_mode\", \"std_srvs/Empty\")")
    scripting.eval(component_name+".rosservice.connect(\"setJointPositionControlModeROSService\",\""+component_name+"/set_joint_position_control_mode\", \"std_srvs/Empty\")")
    scripting.eval(component_name+".rosservice.connect(\"setCartesianImpedanceControlModeROSService\",\""+component_name+"/set_cartesian_impedance_control_mode\", \"std_srvs/Empty\")")
    scripting.eval(component_name+".rosservice.connect(\"setJointTorqueControlModeROSService\",\""+component_name+"/set_joint_torque_control_mode\", \"std_srvs/Empty\")")
    scripting.eval(component_name+".rosservice.connect(\"getCurrentControlModeROSService\",\""+component_name+"/get_current_control_mode\", \"std_srvs/Trigger\")")

    ros.import("rtt_actionlib")
    ros.import("rtt_krl_msgs")
    loadService(getRobotName()+"_krl_tool","actionlib")
    scripting.eval(getRobotName()+"_krl_tool.actionlib.connectSub(\"PTP\",\"ptp\")")
    scripting.eval(getRobotName()+"_krl_tool.actionlib.connectSub(\"LIN\",\"lin\")")


    loadAtiFTSensor(true)
    connectToAtiFTSensorPort(component_name,"ft_sensor_in",cp)

    if(start_component) then
      startComponent(component_name)
    return component_name
}

global void setJointTorqueControlMode()
{
    scripting.eval(getRobotName()+"_krl_tool.setJointTorqueControlMode()")
}

global void setCartesianImpedanceControlMode()
{
    scripting.eval(getRobotName()+"_krl_tool.setCartesianImpedanceControlMode()")
}

global void setJointImpedanceControlMode()
{
    scripting.eval(getRobotName()+"_krl_tool.setJointImpedanceControlMode()")
}

global void setJointPositionControlMode()
{
    scripting.eval(getRobotName()+"_krl_tool.setJointPositionControlMode()")
}

void loadGazeboComponent(string comp_name)
{
    print.log(Info,"Loading Gazebo Component "+comp_name)
    import("rtt_std_srvs")
    import("rtt_roscomm")
    import("rtt_gazebo_embedded")

    loadComponent(comp_name,"RTTGazeboEmbedded")
    setActivity(comp_name,0.001,10,ORO_SCHED_OTHER)
    scripting.eval(comp_name+".argv = strings(\"--verbose\")")

    scripting.eval(comp_name+".add_plugin(\"libgazebo_ros_paths_plugin.so\")")
    scripting.eval(comp_name+".add_plugin(\"libgazebo_ros_api_plugin.so\")")

    scripting.eval(comp_name+".world_path = ros.find(\"lwr_utils\")+\"/launch/lwr.world\"")

    configureComponent(comp_name)

    // Sync ros/gazebo/rtt clocks
    import("rtt_rosclock")
    scripting.eval("ros.clock.useROSClockTopic()")
    scripting.eval("ros.clock.enableSimClock()")

    startComponent(comp_name)
}

var bool gz_loaded = false
var bool required_packages_loaded = false;

global bool isGazeboLoaded()
{
    return gz_loaded
}
global void setGazeboLoaded(bool gzloaded)
{
    gz_loaded = gzloaded
}
global bool isRequiredPackagesLoaded()
{
    return required_packages_loaded
}
global void setRequiredPackagesLoaded(bool req)
{
    required_packages_loaded = req
}
global bool importRequiredPackages()
{
    // This is gonna load all the <export><plugin_depends> tags
    print.log(Info,"Loading all recommended RTT packages")
    ros.import("lwr_utils")
    print.log(Info,"Done loading recommended RTT packages")
    return true;
}


var strings std_ports_names = strings("JointPosition","JointVelocity","JointTorque","JointPositionCommand","JointTorqueCommand");
var strings lwr_ports_names = strings("fromKRL","toKRL","RobotState","FRIState", "MassMatrix", "Jacobian", "CartesianVelocity", "CartesianPosition", "GravityTorque", "CartesianImpedanceCommand", "CartesianPositionCommand", "JointImpedanceCommand", "CartesianWrenchCommand");

global bool connectPortsFromList(string controller_name,string robot_name,strings ports_list ,ConnPolicy cp)
{
    connectPeers(controller_name,robot_name);
    var bool connected = true;
    for(var int i = 0 ; i < ports_list.size ; i = i + 1)
    {
        connected = connect(robot_name+"."+ports_list[i],controller_name+"."+ports_list[i],cp);
        print.log(Info," - "+robot_name+"."+ports_list[i]+" => "+controller_name+"."+ports_list[i]+" : "+connected);
    }
    return true;
}
global bool connectStandardPorts(string controller_name,string robot_name, ConnPolicy cp)
{
    print.log(Info,"Connecting Standard ports from "+controller_name+" to robot "+robot_name);
    connectPortsFromList(controller_name,robot_name,std_ports_names,cp);
    return true
}

global bool connectLWRPorts(string controller_name,string robot_name, ConnPolicy cp)
{
    connectStandardPorts(controller_name,robot_name,cp)
    print.log(Info,"Connecting all ports from "+controller_name+" to robot "+robot_name);
    connectPortsFromList(controller_name,robot_name,lwr_ports_names,cp);
    return true
}

global bool connectAllPorts(string controller_name,string robot_name, ConnPolicy cp)
{
    connectStandardPorts(controller_name,robot_name,cp)
    connectLWRPorts(controller_name,robot_name,cp)
    print.ln("\033[34;1mconnectAllPorts is deprecated,\n please use connectStandardPorts() + connectLWRPorts() instead for standard + Kuka specific ports\033[0m");
    return true;
}

global string loadStatePublisher(bool start_component)
{
    var string robot_name = getRobotName()
    var string comp_name = robot_name+"_state_pub"

    import("rtt_state_publisher")
    import("rtt_sensor_msgs")

    loadComponent(comp_name,"RTTStatePublisher")

    setActivity(comp_name,0.01,LowestPriority,ORO_SCHED_OTHER)

    if(!configureComponent(comp_name)) then
        return ""

    print.ln("\033[34;1mLoading state publisher for "+robot_name+"\033[0m\n")

    connectPeers(comp_name,robot_name)

    var ConnPolicy cp
    cp.lock_policy = 1

    connect(comp_name+".JointPosition",robot_name+".JointPosition",cp)
    connect(comp_name+".JointVelocity",robot_name+".JointVelocity",cp)
    connect(comp_name+".JointTorque",robot_name+".JointTorque",cp)

    stream(comp_name+".JointStates",ros.comm.topic("joint_states"))

    if(start_component) then
        startComponent(comp_name)
    return comp_name
}

global string loadConman()
{
    print.ln("\033[34;1mLoading ConMan \033[0m\n")
    ros.import("conman")
    ros.import("conman_ros")
    loadComponent("scheme","conman::Scheme")
    setActivity("scheme",0.001,10,ORO_SCHED_RT)
    scripting.eval("scheme.scheme_name = \"scheme\"")
    scripting.eval("scheme.loadService(\"conman_ros\")")
    scripting.eval("scheme.addGroup(\"robots\")")
    scripting.eval("scheme.addGroup(\"state_estimation\")")
    scripting.eval("scheme.addGroup(\"trajectory_generation\")")
    scripting.eval("scheme.addGroup(\"controllers\")")

    return "scheme"
}

global void conmanEnableBlocks()
{
    scripting.eval("scheme.setEnabledBlocks(strings(\"robots\",\"state_estimation\",\"trajectory_generation\",\"controllers\"),true)")
}

global bool conmanAddStateEstimationComponent(string component_name)
{
    stopComponent(component_name);
    connectPeers("scheme",component_name);
    scripting.eval("scheme.addToGroup(\""+component_name+"\",\"state_estimation\")");
    return true
}

global bool conmanAddRobotComponent(string component_name)
{
    stopComponent(component_name);
    connectPeers("scheme",component_name);
    scripting.eval("scheme.addToGroup(\""+component_name+"\",\"robots\")");
    return true
}

global bool conmanAddTrajectoryComponent(string component_name)
{
    stopComponent(component_name);
    connectPeers("scheme",component_name);
    scripting.eval("scheme.addToGroup(\""+component_name+"\",\"trajectory_generation\")");
    return true
}

global bool conmanAddControllerComponent(string component_name)
{
    stopComponent(component_name);
    connectPeers("scheme",component_name);
    scripting.eval("scheme.addToGroup(\""+component_name+"\",\"controllers\")");
    return true
}

global string loadFBSched()
{
    import("fbsched");
    var bool res = loadComponent("fbs","FBSched");
    setActivity("fbs",0.001,10,ORO_SCHED_RT);
    return "fbs";
}
global bool addComponentToFBSched(string component_name)
{
    stopComponent(component_name)
    scripting.eval(component_name+".setPeriod(0)")
    connectPeers("fbs",component_name)
    setMasterSlaveActivity("fbs",component_name)
    startComponent(component_name)
    return true;
}

global void generateGraph()
{
    import("rtt_dot_service")
    loadService("Deployer","dot")
    scripting.eval("dot.generate()")
    print.ln("Graph generated. You can now run \n\n\t xdot ~/.ros/orograph.dot")
}


global string loadJointTrajectoryGeneratorKDL(bool start_component)
{
  var string robot_name = getRobotName()
  var string comp_name = robot_name + "_traj_kdl"

  print.ln("\033[34;1mLoading Trajectory generator KDL for "+robot_name+"\033[0m\n")

  import("rtt_ros")
  ros.import("rtt_joint_traj_generator_kdl")
  loadComponent(comp_name,"JointTrajGeneratorKDL")
  setActivity(comp_name,0.001,10,ORO_SCHED_RT);

  var ConnPolicy cp
  cp.lock_policy = 1

  connect(comp_name+".joint_position_in",robot_name+".JointPosition",cp)
  connect(comp_name+".joint_velocity_in",robot_name+".JointVelocity",cp)
  connect(comp_name+".joint_position_out",robot_name+".JointPositionCommand",cp)

  configureComponent(comp_name)

  if(start_component) then
      startComponent(comp_name)
  return comp_name;
}

global string loadROSControl(bool start_component)
{
    var string robot_name = getRobotName()
    var string comp_name = robot_name + "_ros_control"

    print.ln("\033[34;1mLoading ROS Control for "+robot_name+"\033[0m\n")

    import("rtt_ros")
    import("rtt_control_msgs")
    import("rtt_controller_manager_msgs")

    ros.import("rtt_ros_control_embedded")

    // Load the RttRosControl component
    loadComponent(comp_name,"RttRosControl")

    //// Give it a periodic activity
    setActivity(comp_name,0.001,LowestPriority+25,ORO_SCHED_RT)


    //// Preload controllers
    // scripting.eval(comp_name+".preloadController(\"joint_trajectory_controller\")")
    // scripting.eval(comp_name+".preloadController(\"joint_state_controller\")")

    //// Configure the RttRosControl component
    configureComponent(comp_name)

    var ConnPolicy cp
    cp.lock_policy = 1

    connect(comp_name+".JointPosition",robot_name+".JointPosition",cp)
    connect(comp_name+".JointVelocity",robot_name+".JointVelocity",cp)
    connect(comp_name+".JointTorque",robot_name+".JointTorque",cp)
    // WARNING : Connect ONLY the one matching the current control mode !
    // connect(comp_name+".JointPositionCommand",robot_name+".JointPositionCommand",cp)
    connect(comp_name+".JointTorqueCommand",robot_name+".JointTorqueCommand",cp)

    //// Start it
    if(start_component) then{
        startComponent(comp_name)
        // scripting.eval(comp_name+".startControllers()")
    }
    return comp_name;
}

global string loadRobot(string robot_name,bool is_sim,bool start_component)
{
    //var bool is_sim = isSim();
    //var string robot_name = getRobotName()
    var bool new_gazebo_interface = false

    if(is_sim) then
    {

        if(new_gazebo_interface) then
        {
            ros.import("rtt_lwr_sim")
            if(!required_packages_loaded) then{
                importRequiredPackages()
                required_packages_loaded = true
            }

            loadComponent(robot_name,"lwr::LWRSimRemote")

            ros.import("rtt_rosclock")
            scripting.eval("ros.clock.useROSClockTopic()")
            scripting.eval("ros.clock.enableSimClock()")

        }else{
            if(!gz_loaded) then {
                loadGazeboComponent("gazebo")
                gz_loaded = true
            }
            if(!required_packages_loaded) then{
                importRequiredPackages()
                required_packages_loaded = true
            }
            ros.import("rtt_lwr_sim")
            loadComponent(robot_name,"lwr::LWRSim")
            stream(robot_name+".JointStates",ros.comm.topic(robot_name+"/joint_states_log"))
            stream(robot_name+".JointStatesCommand",ros.comm.topic(robot_name+"/joint_states_command_log"))
            connectPeers("gazebo",robot_name)
            scripting.eval(robot_name+".synchronize_with_commands = false")
            scripting.eval(robot_name+".getModel(\"gazebo\",\""+robot_name+"\",30.0)")
        }
        setActivity(robot_name,0,10,ORO_SCHED_OTHER)
        configureComponent(robot_name)

        print.ln("\033[34;1m["+robot_name+"] RUNNING ON SIMULATION \033[0m\n")
    }
    else
    {
        print.ln("\033[34;1m["+robot_name+"] Importing required packages \033[0m\n")
        if(!required_packages_loaded) then{
            importRequiredPackages()
            required_packages_loaded = true
        }
        print.ln("\033[34;1m["+robot_name+"] Loading robot component  \033[0m\n")
        ros.import("lwr_fri")
        loadComponent(robot_name,"FRIComponent")
        setActivity(robot_name,0,90,ORO_SCHED_RT)
        print.ln("\033[34;1m["+robot_name+"] Configuring robot component  \033[0m\n")
        configureComponent(robot_name)

        print.ln("\033[34;1m["+robot_name+"] RUNNING ON HARDWARE \033[0m\n")
    }

    if(start_component) then
        startComponent(robot_name)

    loadKRLTool(true)

    if(is_sim) then
        setJointTorqueControlMode();
    return robot_name;
}
